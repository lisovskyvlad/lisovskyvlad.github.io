<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mysql | Будни веб-разработчика]]></title>
  <link href="http://lisovskyvlad.github.io/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://lisovskyvlad.github.io/"/>
  <updated>2014-02-05T12:26:36+04:00</updated>
  <id>http://lisovskyvlad.github.io/</id>
  <author>
    <name><![CDATA[Lisovsky Vlad]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Переезд с MySQL на PostgreSQL]]></title>
    <link href="http://lisovskyvlad.github.io/blog/2013/12/move-from-mysql-to-postgresql/"/>
    <updated>2013-12-18T23:00:00+04:00</updated>
    <id>http://lisovskyvlad.github.io/blog/2013/12/move-from-mysql-to-postgresql</id>
    <content type="html"><![CDATA[<p>В настоящее время я работаю в <a href="http://lakehouse.ru/labs/">lakehouse:labs</a>. На наших
ключевых проектах мы постепенно переезжаем с MySQL на PostgreSQL.</p>

<p>К сожалению, упомянутые выше две СУБД не совместимы на уровне дампа, а потому появилась
необходимость в инструменте для миграции. Большую часть кода я пишу на Ruby,
поэтому приоритет отдавался инструментам на этом языке. После изучения возможных
<a href="http://wiki.postgresql.org/wiki/Converting_from_other_Databases_to_PostgreSQL#MySQL">вариантов</a>
я и мой коллега <a href="http://blog.ivaravko.com/">Игорь Варавко</a> решили остановиться на геме под
названием taps-taps, под катом я опишу как им пользоваться.</p>

<!-- more -->


<p>Для начала вам нужен ruby версии не ниже 1.9.2, на 1.8.* я не проверял &ndash; может быть и заработает.
Процесс установки ruby в этом посте я опущу, но в будущем планирую написать отдельный пост,
посвященный установке ruby. В интернетах можно найти большое количество постов и инструкций,
но многие из них мне не нравятся, либо же они уже не актуальны.</p>

<p>Далее, установим все необходимые гемы:</p>

<p><code>bash Установка гемов
$ gem install taps-taps pg mysql
</code></p>

<p>Собственно, ставим сам гем taps-taps, pg и mysql, хочу отметить что не mysql2,
а именно mysql, taps-taps именно его использует для подключения к mysql.</p>

<p>Забавный факт &ndash; гем <a href="https://github.com/wijet/taps">taps-taps</a> на самом деле форк гема
<a href="https://github.com/ricardochimal/taps">taps</a>, автор которого, как это часто бывает в oos, забросил
своё детище и оно за время его отсутствия обрасло issues и pull request на гитхабе.</p>

<p>taps-taps под капотом использует sinatra и rest-client, то есть используется клиент-серверный подход,
именно этот факт заставил попробовать его, а не решение от
<a href="https://github.com/maxlapshin/mysql2postgres">Макса Лапшина</a>.</p>

<p>Чтобы заставить работать эту балалайку, нужно запустить taps сервер и taps клиент.
При запуске клиента, если всё сложилось хорошо, начнётся миграция, причём она идёт посредством
обмена json по http, используется basic http authorization.</p>

<p>Запускаем сервер:</p>

<p><code>bash Запуск taps сервера
$ taps server mysql://db_user:password@localhost/db_name?encoding=utf8 httpuser httppassword
</code></p>

<p>В данном случае я предлагаю использовать сервер, который коннектится к mysql, хотя
возможные разные варианты подключения,
в <a href="https://github.com/wijet/taps/blob/master/README.rdoc">readme</a>
приведены другие варианты использования.</p>

<p>Нужно создать пустую базу данных в PostgreSQL, обычно я это делаю вот так:</p>

<p><code>
$ createdb project_db_dev
</code></p>

<p>Запускаем клиент, который будет принимать данные:</p>

<p><code>bash Запуск taps клиента
$ taps pull postgres://db_user:password@localhost/db_name http://httpuser:httppassword@localhost:5000
</code></p>

<p>Уточню некоторые вещи:</p>

<ul>
<li>db_user &ndash; имя пользователя, который имеет доступ к бд</li>
<li>db_name &ndash; имя бд из которой мигрируем и в которую</li>
<li>httpuser &ndash; имя пользователя для http аутентификации</li>
<li>httppassword &ndash; пароль пользователя для http аутентификаци</li>
</ul>


<p>Если вы всё сделали правильно, то увидите примерно такой вывод к консоле:</p>

<p><code>bash Лог
Receiving schema
Schema:          0% |                                          | ETA:  --:--:--
Schema:          2% |                                          | ETA:  00:00:16
Schema:          5% |==                                        | ETA:  00:00:15
...
Schema:        100% |==========================================| Time: 00:00:16
Receiving data
34 tables, 6,800 records
admins:        100% |==========================================| Time: 00:00:00
...
versions:      100% |==========================================| Time: 00:00:00
Resetting sequences
</code></p>

<p>После того как процесс миграции прошел, подключаемся к postgresql и проверяем
приложение, всё ли работает.</p>

<p>Проекты, которые мы переносим, написаны плохо:</p>

<ul>
<li>во многих местах используется сырой SQL, хотя стоило бы писать на ActiveRecord</li>
<li>используются некоторые SQL функции, специфичный для mysql, например DATE_ADD.</li>
</ul>


<p>Вот такой код:
<code>ruby
seminars.started_at &lt;= DATE_ADD(#{from},INTERVAL -4 HOUR)
</code></p>

<p>Нужно заменить на такой:
<code>ruby
seminars.started_at &lt;= #{from}::timestamp - INTERVAL '4 HOURS'"
</code></p>

<p>Также был найден забавный баг:
<code>ruby
def partimer_conditions
  cond =  '1'
  cond += " AND user.full_name LIKE ... "
  cond
end
</code></p>

<p>Фича в том, что postgres ругается на подобный код:
<code>
ERROR:  argument of WHERE must be type boolean, not type integer
</code></p>

<p>Если же вместо 1 поставить true, то всё будет ок.</p>

<p>Ах да, предыдущие погромисты не знали о ActiveRecord::Relation,
не поняли концепцию <a href="https://en.wikipedia.org/wiki/Method_chaining">method chaining</a>
и придумали свой конструктор запросов &ndash; бывшие PHP программисты, наверное.</p>

<p>Эти и много других отличий между этими СУБД описаны
<a href="http://www.the-art-of-web.com/sql/postgres-mysql/">тут</a>, <a href="http://eax.me/postgresql-vs-mysql/">тут</a>,
<a href="http://www.wikivs.com/wiki/MySQL_vs_PostgreSQL">тут</a> и много где ещё.</p>

<p>Возможно, кому-то интересна моя мотивация &ndash; зачем мигрировать с MySQL на PostgreSQL,
ведь MySQL это проверенное большим количеством проектов и инсталляций решение.
На мой скромный взгляд, MySQL переживает далеко не лучшие времена.
Находящаяся под Oracle, имеющая куча форков и ответвлений, с меняющимися лицензиями &ndash;
всё это не вызывает желания пользоваться этой СУБД.</p>

<p>На её фоне PostgreSQL выглядит куда более привлекательнее &ndash; огромное количество новых
фич, типа <a href="http://www.postgresql.org/docs/9.3/static/hstore.html">hstore</a>,
поддержка типа <a href="http://www.postgresql.org/docs/9.3/static/functions-json.html">json</a>
и его индексация, независимые разработчики по всему миру,
надёжность как у танка <a href="https://ru.wikipedia.org/wiki/%D0%A2-90">Т-90 МС</a>, большое количество
интересных российских проектов, использующих его в качестве основного хранилища.</p>

<p>Буду рад, если моё решение поможет и вам!</p>
]]></content>
  </entry>
  
</feed>
